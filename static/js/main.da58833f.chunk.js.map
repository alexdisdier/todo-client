{"version":3,"sources":["assets/img/loading.svg","assets/img/Cloud_Warning.svg","components/Header.js","components/Tasks/Task/Task.js","components/Tasks/Tasks.js","components/Input/Input.js","components/Button/Button.js","components/Footer.js","components/Loading/Loading.js","components/Error/Error.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","header","props","react_default","a","createElement","className","title","task","Fragment","onClick","handleDelete","index","isDone","handleCrossOut","tasks","map","Task_Task","key","input","placeholder","type","name","value","onChange","handleChange","button","footer","loading","class","src","image","alt","error","id","App","state","appTitle","isLoading","buildTasks","_callee","regenerator_default","wrap","_context","prev","next","axios","get","headers","Content-Type","then","res","data","_this","setState","t0","stop","this","event","target","update","handleSubmit","preventDefault","post","_id","concat","Error_Error","response","Loading_Loading","Tasks","Header","renderError","renderTasks","onSubmit","Input_Input","Button_Button","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0ZCUzBC,eARA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWJ,EAAMK,UCetBC,SAhBF,SAAAN,GACX,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAK,SAAA,KACEN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,QAAMK,QAAS,kBAAMR,EAAMS,aAAaT,EAAMU,SAA9C,KACAT,EAAAC,EAAAC,cAAA,QACEC,UAAWJ,EAAMW,OAAS,aAAe,GACzCH,QAAS,kBAAMR,EAAMY,eAAeZ,EAAMU,SAEzCV,EAAMK,WCQFQ,EAjBD,SAAAb,GACZ,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXJ,EAAMa,MAAMC,IAAI,SAACR,EAAMI,GAAP,OACfT,EAAAC,EAAAC,cAACY,EAAD,CACEC,IAAKN,EACLD,aAAcT,EAAMS,aACpBG,eAAgBZ,EAAMY,eACtBP,MAAOC,EAAKD,MACZK,MAAOA,EACPC,OAAQL,EAAKK,aCARM,SAXD,SAAAjB,GAAK,OACjBC,EAAAC,EAAAC,cAAA,SACEC,UAAU,YACVc,YAAY,sBACZC,KAAK,OACLC,KAAMpB,EAAMoB,KACZC,MAAOrB,EAAMqB,MACbC,SAAUtB,EAAMuB,iBCALC,SANA,SAAAxB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUiB,MAAM,UAChCpB,EAAAC,EAAAC,cAAA,oBCAWsB,EAJA,SAAAzB,GACb,OAAOC,EAAAC,EAAAC,cAAA,iCCWMuB,SARC,WACd,OACEzB,EAAAC,EAAAC,cAAA,OAAKwB,MAAM,oCAAoCtB,MAAM,KACnDJ,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAOC,IAAI,oCCOZC,SAXD,SAAA/B,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAK6B,GAAG,gBAAgB5B,UAAU,YAChCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAOC,IAAI,wBACrB7B,EAAAC,EAAAC,cAAA,YAAOH,EAAM+B,WCoJNE,6MA/IbC,MAAQ,CACNC,SAAU,aACVlB,MAAO,GACPJ,MAAO,GACPuB,WAAW,EACXL,MAAO,QAYTM,gCAAa,SAAAC,IAAA,OAAAC,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEHC,IACHC,IADG,8CACgD,CAClDC,QAAS,CACPC,eAAgB,sBAGnBC,KAAK,SAAAC,GACJ,IAAMpC,EAAQoC,EAAIC,KAClBC,EAAKC,SAAS,CACZvC,QACAuB,WAAW,MAZR,OAAAK,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SAgBTU,EAAKC,SAAS,CACZrB,MAAO,sBAjBA,wBAAAU,EAAAa,SAAAhB,EAAAiB,KAAA,cA2BbhC,aAAe,SAAAiC,GACb,IAAMpC,EAAOoC,EAAMC,OAAOrC,KACpBC,EAAQmC,EAAMC,OAAOpC,MACrBqC,EAAS,GACfA,EAAOtC,GAAQC,EACf8B,EAAKC,SAASM,MAGhBC,aAAe,SAAAH,GACbA,EAAMI,iBACN,IAAMtD,EAAO,CACXD,MAAO8C,EAAKjB,MAAMjB,OAGpBkC,EAAKC,SAAS,CACZnC,MAAO,KAGT2B,IACGiB,KADH,gDACyDvD,EAAM,CAC3DwC,QAAS,CACPC,eAAgB,sBAGnBC,KAAK,SAAAC,GACJE,EAAKd,kBAIXzB,eAAiB,SAAAF,GACf,IAAMsB,EAAKmB,EAAKjB,MAAMrB,MAAMH,GAAOoD,IACnClB,IACGiB,KADH,oDAAAE,OAC4D/B,GAAM,CAC9Dc,QAAS,CACPC,eAAgB,sBAGnBC,KAAK,SAAAC,GACJE,EAAKd,kBAIX5B,aAAe,SAAAC,GACb,IAAMsB,EAAKmB,EAAKjB,MAAMrB,MAAMH,GAAOoD,IACnClB,IACGiB,KADH,oDAAAE,OAC4D/B,GAAM,CAC9Dc,QAAS,CACPC,eAAgB,sBAGnBC,KAAK,SAAAC,GACJE,EAAKd,6FAtFT,OAAyB,OAArBkB,KAAKrB,MAAMH,MACN9B,EAAAC,EAAAC,cAAC6D,EAAD,CAAOjC,MAAOwB,KAAKrB,MAAMH,QAEzB,+KA4BcwB,KAAKlB,2BAAtB4B,2BACCA,2IA2DP,OAAKV,KAAKrB,MAAME,WAAkC,OAArBmB,KAAKrB,MAAMH,MAQ7BwB,KAAKrB,MAAME,WAAkC,OAArBmB,KAAKrB,MAAMH,MACrC9B,EAAAC,EAAAC,cAAC+D,EAAD,MAEA,KATLjE,EAAAC,EAAAC,cAACgE,EAAD,CACEtD,MAAO0C,KAAKrB,MAAMrB,MAClBD,eAAgB2C,KAAK3C,eACrBH,aAAc8C,KAAK9C,gDAWzB,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiE,EAAD,CAAQ/D,MAAOkD,KAAKrB,MAAMC,WAEzBoB,KAAKc,cAENpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BmD,KAAKe,eAE9CrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOmE,SAAUhB,KAAKI,cACpC1D,EAAAC,EAAAC,cAACqE,EAAD,CACEpD,KAAK,QACLC,MAAOkC,KAAKrB,MAAMjB,MAClBM,aAAcgC,KAAKhC,eAErBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACsE,EAAD,SAKNxE,EAAAC,EAAAC,cAACuE,EAAD,cA1IUC,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.da58833f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.14ca3612.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud_Warning.f3801667.svg\";","import React from \"react\";\n\nconst header = props => {\n  return (\n    <header>\n      <h1 className=\"wrapper\">{props.title}</h1>\n    </header>\n  );\n};\n\nexport default header;\n","import React from \"react\";\n\nimport \"./Task.css\";\n\nconst task = props => {\n  return (\n    <>\n      <li className=\"card-task\">\n        <span onClick={() => props.handleDelete(props.index)}>X</span>\n        <span\n          className={props.isDone ? \"cross-task\" : \"\"}\n          onClick={() => props.handleCrossOut(props.index)}\n        >\n          {props.title}\n        </span>\n      </li>\n    </>\n  );\n};\n\nexport default task;\n","import React from \"react\";\n\nimport Task from \"./Task/Task\";\n\nconst tasks = props => {\n  return (\n    <ul className=\"card\">\n      {props.tasks.map((task, index) => (\n        <Task\n          key={index}\n          handleDelete={props.handleDelete}\n          handleCrossOut={props.handleCrossOut}\n          title={task.title}\n          index={index}\n          isDone={task.isDone}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default tasks;\n","import React from \"react\";\nimport \"./Input.css\";\n\nconst input = props => (\n  <input\n    className=\"card-task\"\n    placeholder=\"type some text here\"\n    type=\"text\"\n    name={props.name}\n    value={props.value}\n    onChange={props.handleChange}\n  />\n);\n\nexport default input;\n","import React from \"react\";\n\nimport \"./Button.css\";\n\nconst button = props => (\n  <button className=\"btn-add\" value=\"submit\">\n    <span>+</span>\n  </button>\n);\n\nexport default button;\n","import React from \"react\";\n\nconst footer = props => {\n  return <footer />;\n};\n\nexport default footer;\n","import React from \"react\";\n\n// source animation loading: https://codepen.io/alexdisdier/pen/XOBVdR\nimport image from \"../../assets/img/loading.svg\";\nimport \"./Loading.css\";\n\nconst loading = () => {\n  return (\n    <div class=\"loader center-page loader--style1\" title=\"0\">\n      <img src={image} alt=\"loading gif\" />\n    </div>\n  );\n};\n\nexport default loading;\n","import React from \"react\";\n\nimport image from \"../../assets/img/Cloud_Warning.svg\";\nimport \"./Error.css\";\n\nconst error = props => {\n  return (\n    <div id=\"error-loading\" className=\"absolute\">\n      <div className=\"relative\">\n        <img src={image} alt=\"cloud warning error\" />\n        <span>{props.error}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default error;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./assets/css/reset.css\";\nimport \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks/Tasks\";\nimport Input from \"./components/Input/Input\";\nimport Button from \"./components/Button/Button\";\nimport Footer from \"./components/Footer\";\n\nimport Loading from \"./components/Loading/Loading\";\nimport Error from \"./components/Error/Error\";\n\nclass App extends Component {\n  state = {\n    appTitle: \"To do list\",\n    input: \"\",\n    tasks: [],\n    isLoading: true,\n    error: null\n  };\n\n  renderError() {\n    if (this.state.error !== null) {\n      return <Error error={this.state.error} />;\n    } else {\n      return null;\n    }\n  }\n\n  // Axios\n  buildTasks = async () => {\n    try {\n      await axios\n        .get(`https://todo-server-alex.herokuapp.com/read`, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n        .then(res => {\n          const tasks = res.data;\n          this.setState({\n            tasks,\n            isLoading: false\n          });\n        });\n    } catch (error) {\n      this.setState({\n        error: \"An error occurred\"\n      });\n    }\n  };\n\n  async componentDidMount() {\n    const response = await this.buildTasks();\n    return response;\n  }\n\n  handleChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    const update = {};\n    update[name] = value;\n    this.setState(update);\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const task = {\n      title: this.state.input\n    };\n\n    this.setState({\n      input: \"\"\n    });\n\n    axios\n      .post(`https://todo-server-alex.herokuapp.com/create`, task, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(res => {\n        this.buildTasks();\n      });\n  };\n\n  handleCrossOut = index => {\n    const id = this.state.tasks[index]._id;\n    axios\n      .post(`https://todo-server-alex.herokuapp.com/update?id=${id}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(res => {\n        this.buildTasks();\n      });\n  };\n\n  handleDelete = index => {\n    const id = this.state.tasks[index]._id;\n    axios\n      .post(`https://todo-server-alex.herokuapp.com/delete?id=${id}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(res => {\n        this.buildTasks();\n      });\n  };\n\n  renderTasks() {\n    if (!this.state.isLoading && this.state.error === null) {\n      return (\n        <Tasks\n          tasks={this.state.tasks}\n          handleCrossOut={this.handleCrossOut}\n          handleDelete={this.handleDelete}\n        />\n      );\n    } else if (this.state.isLoading && this.state.error === null) {\n      return <Loading />;\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title={this.state.appTitle} />\n\n        {this.renderError()}\n\n        <div className=\"card-container wrapper\">{this.renderTasks()}</div>\n\n        <div className=\"wrapper\">\n          <form className=\"card\" onSubmit={this.handleSubmit}>\n            <Input\n              name=\"input\"\n              value={this.state.input}\n              handleChange={this.handleChange}\n            />\n            <div className=\"btn-add-container\">\n              <Button />\n            </div>\n          </form>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}