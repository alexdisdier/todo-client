{"version":3,"sources":["components/Header.tsx","components/Tasks/Task/Task.tsx","assets/img/loading.svg","HOC/withLoading.js","components/Tasks/Tasks.tsx","components/Input/Input.tsx","components/Button/Button.tsx","components/Footer.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["header","props","title","className","Task","value","key","isDone","onDrag","onDrop","handleDelete","handleCrossOut","draggable","event","data-testid","onClick","withLoading","WrappedComponent","loading","rest","src","image","alt","tasks","lastIndex","length","style","height","overflowY","map","id","Input","name","handleChange","placeholder","type","onChange","button","footer","LOCALSTORAGE_KEY_TASKS","App","useState","input","setInput","setTasks","setOnDragIndex","setLoading","useEffect","buildTasks","localStorageTasks","localStorage","getItem","JSON","parse","useCallback","newTasks","taskToUpdate","find","task","sort","a","b","setItem","stringify","filteredTasks","filter","index","preventDefault","renderTasks","useMemo","color","Header","alignItems","display","onDragOver","onSubmit","nanoid","date","Date","pos","target","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.384217fe.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IProps {\n  title: string;\n}\n\nconst header: React.FC<IProps> = (props: IProps) => {\n  const { title } = props;\n  return (\n    <header>\n      <h1 className=\"wrapper\">{title}</h1>\n    </header>\n  );\n};\n\nexport default header;\n","import React, { FC } from 'react';\n\nimport { TaskDefinition } from '../../../types';\n\nimport './Task.css';\n\ninterface IProps {\n  onDrag(event: React.MouseEvent, key: string): void;\n  onDrop(event: React.MouseEvent, key: string): void;\n  handleDelete(key: string): void;\n  handleCrossOut(key: string): void;\n  value: Pick<TaskDefinition, 'key' | 'title' | 'isDone'>;\n}\n\nconst Task: FC<IProps> = (props: IProps) => {\n  const {\n    value: { key, title, isDone },\n    onDrag,\n    onDrop,\n    handleDelete,\n    handleCrossOut\n  } = props;\n\n  return (\n    <>\n      <li\n        className=\"card-task\"\n        draggable={true}\n        onDrag={event => onDrag(event, key)}\n        onDrop={event => onDrop(event, key)}\n      >\n        <span\n          data-testid=\"task\"\n          className={isDone ? 'cross-task' : ''}\n          onClick={() => handleCrossOut(key)}\n        >\n          {title}\n        </span>\n        <span data-testid=\"delete-task\" onClick={() => handleDelete(key)}>\n          X\n        </span>\n      </li>\n    </>\n  );\n};\n\nexport default Task;\n","export default __webpack_public_path__ + \"static/media/loading.acea8664.svg\";","/* eslint-disable react/display-name */\n/* \n  HOC: a Higher Order Component is a function that accepts a component as paramater and returns an augmented version of this component. Often used in React libraries.\n  It wraps a component and returns an enhanced component. \n  hocFactory:: W: React.Component => E: React.Component\n*/\n\nimport React from 'react';\nimport image from '../assets/img/loading.svg';\nimport './withLoading.css';\n\nconst withLoading = WrappedComponent => ({ loading, ...rest }) =>\n  loading ? (\n    <div className=\"loader center-page loader--style1\" title=\"0\">\n      <img src={image} alt=\"loading gif\" />\n    </div>\n  ) : (\n    <WrappedComponent {...rest} />\n  );\n\nexport default withLoading;\n","import React, { FC } from 'react';\n\nimport Task from './Task/Task';\nimport withLoading from '../../HOC/withLoading';\n\nimport { TasksDefinition } from '../../types';\n\nimport './Tasks.css';\n\ninterface IProps {\n  tasks: TasksDefinition;\n  onDrag(event: React.MouseEvent, key: string): void;\n  onDrop(event: React.MouseEvent, key: string): void;\n  handleDelete(key: string): void;\n  handleCrossOut(key: string): void;\n}\n\nconst Tasks: FC<IProps> = (props: IProps) => {\n  const { tasks, handleDelete, handleCrossOut, onDrag, onDrop } = props;\n\n  const lastIndex = tasks.length;\n\n  return (\n    <ul\n      className=\"card\"\n      style={{ height: 'calc(100vh - 300px)', overflowY: 'scroll' }}\n    >\n      {tasks.map(({ key, title, isDone }) => (\n        <Task\n          key={key}\n          value={{ key, title, isDone }}\n          handleDelete={handleDelete}\n          handleCrossOut={handleCrossOut}\n          onDrag={onDrag}\n          onDrop={onDrop}\n        />\n      ))}\n      <li\n        id=\"last-index\"\n        className=\"card-task\"\n        onDrop={event => onDrop(event, `${lastIndex}`)}\n      >\n        <span> </span>\n      </li>\n    </ul>\n  );\n};\n\n// Currying HOC function where we can pass the props name we need to manipulate.\nexport default withLoading(Tasks);\n","import React, { FC } from 'react';\n\nimport './Input.css';\n\nexport interface IProps {\n  name: string;\n  value: string;\n  handleChange(event: React.FormEvent<HTMLInputElement>): void;\n}\n\nconst Input: FC<IProps> = ({ name, value, handleChange }) => (\n  <input\n    className=\"card-task\"\n    placeholder=\"type some text here\"\n    type=\"text\"\n    name={name}\n    value={value}\n    onChange={handleChange}\n  />\n);\n\nexport default Input;\n","import React from 'react';\n\nimport './Button.css';\n\nconst button = () => (\n  <button className=\"btn-add\" value=\"submit\">\n    <span>+</span>\n  </button>\n);\n\nexport default button;\n","import React from 'react';\n\nconst footer = () => <footer />;\n\nexport default footer;\n","import React, {\n  FC,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  FormEvent,\n  ChangeEvent,\n  MouseEvent,\n  ReactNode\n} from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { TaskDefinition } from './types';\n\nimport './assets/css/reset.css';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks/Tasks';\nimport Input from './components/Input/Input';\nimport Button from './components/Button/Button';\nimport Footer from './components/Footer';\n\nconst LOCALSTORAGE_KEY_TASKS = 'tasks';\nconst APP_TITLE = 'To do list';\n\nconst App: FC = () => {\n  const [input, setInput] = useState<string>('');\n  const [tasks, setTasks] = useState<any[]>([]);\n  const [, setOnDragIndex] = useState<number | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    buildTasks();\n  }, []);\n\n  const buildTasks = (): void => {\n    const localStorageTasks =\n      localStorage.getItem(LOCALSTORAGE_KEY_TASKS) || '[]';\n\n    setTasks(JSON.parse(localStorageTasks) || []);\n\n    setLoading(false);\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    setInput(value);\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n\n    const lastIndex: number = tasks.length;\n    const task = {\n      key: nanoid(5),\n      title: input,\n      isDone: false,\n      date: new Date(),\n      pos: lastIndex + 1\n    } as TaskDefinition;\n\n    const newTasks = [...tasks, task];\n\n    localStorage.setItem(LOCALSTORAGE_KEY_TASKS, JSON.stringify(newTasks));\n\n    setInput('');\n    setTasks(newTasks);\n  };\n\n  /**\n   * - toggles crossing out a task\n   * - sorts the list by done task\n   */\n  const handleCrossOut = useCallback(\n    (key: string): void => {\n      const newTasks: TaskDefinition[] = [...tasks];\n\n      const taskToUpdate = newTasks.find(task => task.key === key);\n\n      if (!taskToUpdate) return;\n\n      taskToUpdate.isDone = !taskToUpdate.isDone;\n\n      newTasks.sort((a, b) => {\n        if (a.isDone === b.isDone) return 0;\n        if (a.isDone) return -1;\n        return 1;\n      });\n\n      localStorage.setItem(LOCALSTORAGE_KEY_TASKS, JSON.stringify(newTasks));\n\n      setTasks(newTasks);\n    },\n    [tasks]\n  );\n\n  const handleDelete = useCallback(\n    (key: string): void => {\n      const newTasks: TaskDefinition[] = [...tasks];\n\n      const filteredTasks = newTasks.filter(task => task.key !== key);\n\n      localStorage.setItem(\n        LOCALSTORAGE_KEY_TASKS,\n        JSON.stringify(filteredTasks)\n      );\n\n      setTasks(filteredTasks);\n    },\n    [tasks]\n  );\n\n  const onDrag = (event: MouseEvent, index: number): void => {\n    event.preventDefault();\n\n    setOnDragIndex(index);\n  };\n\n  const onDragOver = (event: MouseEvent): void => {\n    event.preventDefault();\n  };\n\n  const onDrop = async (event: MouseEvent, index: string) => {};\n\n  const renderTasks = useMemo((): ReactNode => {\n    if (tasks.length === 0)\n      return (\n        <div style={{ color: 'black' }}>\n          Input your first task. It will only be saved in your browser\n        </div>\n      );\n\n    return (\n      <Tasks\n        tasks={tasks}\n        handleCrossOut={handleCrossOut}\n        handleDelete={handleDelete}\n        onDrag={onDrag}\n        onDrop={onDrop}\n        loading={loading}\n      />\n    );\n  }, [handleCrossOut, handleDelete, loading, tasks]);\n\n  return (\n    <div className=\"App\">\n      <Header title={APP_TITLE} />\n\n      <div\n        className=\"card-container wrapper done\"\n        style={{\n          alignItems: `${tasks.length === 0 ? 'center' : 'unset'}`,\n          display: `${tasks.length === 0 ? 'flex' : 'unset'}`\n        }}\n        onDragOver={onDragOver}\n      >\n        {renderTasks}\n      </div>\n\n      <div className=\"wrapper\">\n        <form className=\"card\" onSubmit={handleSubmit}>\n          <Input name=\"input\" value={input} handleChange={handleChange} />\n          <div className=\"btn-add-container\">\n            <Button />\n          </div>\n        </form>\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/* istanbul ignore next */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n/* istanbul ignore next */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/* istanbul ignore next */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/* istanbul ignore next */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\n/* istanbul ignore next */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/* istanbul ignore next */\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n/* istanbul ignore next */\nserviceWorker.unregister();\n"],"sourceRoot":""}