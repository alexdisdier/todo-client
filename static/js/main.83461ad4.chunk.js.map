{"version":3,"sources":["assets/img/loading.svg","assets/img/Cloud_Warning.svg","components/Header.tsx","components/Tasks/Task/Task.tsx","HOC/withLoading.js","components/Tasks/Tasks.tsx","components/Input/Input.tsx","components/Button/Button.tsx","components/Footer.tsx","components/Error/Error.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","__webpack_require__","p","header","props","title","react_default","a","createElement","className","Task","_props$value","value","key","isDone","onDrag","onDrop","handleDelete","handleCrossOut","Fragment","draggable","_onDrag","_x","apply","this","arguments","toString","event","_onDrop","_x2","data-testid","onClick","withLoading","WrappedComponent","_ref","loading","rest","Object","objectWithoutProperties","src","image","alt","tasks","lastIndex","length","style","height","overflowY","map","Tasks_Task_Task","id","concat","input","name","handleChange","placeholder","type","onChange","button","footer","error","LOCALSTORAGE_KEY_TASKS","App","state","appTitle","pos","onDragIndex","onDropIndex","buildTasks","localStorageTasks","localStorage","getItem","_this","setState","JSON","parse","target","handleSubmit","_this$state","preventDefault","task","nanoid","date","Date","newTasks","toConsumableArray","setItem","stringify","taskToUpdate","find","sort","b","filteredTasks","filter","index","onDragOver","_callee","regenerator_default","wrap","_context","prev","next","stop","Error_Error","_this$state2","color","components_Tasks_Tasks","_this$state3","Header","renderError","alignItems","display","renderTasks","onSubmit","Input_Input","Button_Button","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83461ad4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.14ca3612.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud_Warning.f3801667.svg\";","import React from \"react\";\n\ninterface IProps {\n  title: string;\n}\n\nconst header: React.FC<IProps> = (props: IProps) => {\n  const { title } = props;\n  return (\n    <header>\n      <h1 className=\"wrapper\">{title}</h1>\n    </header>\n  );\n};\n\nexport default header;\n","import React, { FC } from \"react\";\n\nimport { TaskDefinition } from '../../../types';\n\nimport \"./Task.css\";\n\ninterface IProps {\n  onDrag(event: React.MouseEvent, key: string): void;\n  onDrop(event: React.MouseEvent, key: string): void;\n  handleDelete(key: string): void;\n  handleCrossOut(key: string): void;\n  value: Pick<TaskDefinition, 'key' | 'title' | 'isDone'>;\n}\n\nconst Task: FC<IProps> = (props: IProps) => {\n  const {\n    value: { key, title, isDone },\n    onDrag,\n    onDrop,\n    handleDelete,\n    handleCrossOut\n  } = props;\n\n  return (\n    <>\n      <li\n        className=\"card-task\"\n        draggable={true}\n        onDrag={event => onDrag(event, key)}\n        onDrop={event => onDrop(event, key)}\n      >\n        <span\n          data-testid=\"task\"\n          className={isDone ? \"cross-task\" : \"\"}\n          onClick={() => handleCrossOut(key)}\n        >\n          {title}\n        </span>\n        <span data-testid=\"delete-task\" onClick={() => handleDelete(key)}>X</span>\n      </li>\n    </>\n  );\n};\n\nexport default Task;\n","/* \n  HOC: a Higher Order Component is a function that accepts a component as paramater and returns an augmented version of this component. Often used in React libraries.\n  It wraps a component and returns an enhanced component. \n  hocFactory:: W: React.Component => E: React.Component\n*/\n\nimport React from \"react\";\nimport image from \"../assets/img/loading.svg\";\nimport \"./withLoading.css\";\n\nconst withLoading = WrappedComponent => ({loading, ...rest}) => loading ? <div className=\"loader center-page loader--style1\" title=\"0\">\n<img src={image} alt=\"loading gif\" />\n</div> : <WrappedComponent {...rest} />\n\nexport default withLoading;\n","import React, { FC } from \"react\";\n\nimport Task from \"./Task/Task\";\nimport withLoading from \"../../HOC/withLoading\";\n\nimport { TasksDefinition } from '../../types';\n\nimport \"./Tasks.css\";\n\ninterface IProps {\n  tasks: TasksDefinition;\n  onDrag(event: React.MouseEvent, key: string): void;\n  onDrop(event: React.MouseEvent, key: string): void;\n  handleDelete(key: string): void;\n  handleCrossOut(key: string): void;\n}\n\nconst Tasks: FC<IProps> = (props: IProps) => {\n  const {\n    tasks,\n    handleDelete,\n    handleCrossOut,\n    onDrag,\n    onDrop,\n  } = props;\n\n  const lastIndex = tasks.length;\n\n  return (\n    <ul className=\"card\" style={{  height: 'calc(100vh - 300px)',\n      overflowY: \"scroll\"}}>\n      {tasks.map(({ key, title, isDone}) => (\n        <Task\n          key={key}\n          value={{key, title, isDone}}\n          handleDelete={handleDelete}\n          handleCrossOut={handleCrossOut}\n          onDrag={onDrag}\n          onDrop={onDrop}\n        />\n      ))}\n      <li\n        id=\"last-index\"\n        className=\"card-task\"\n        onDrop={event => onDrop(event, `${lastIndex}`)}\n      >\n        <span> </span>\n      </li>\n    </ul>\n  );\n};\n\n// Currying HOC function where we can pass the props name we need to manipulate.\nexport default withLoading(Tasks);\n","import React from \"react\";\n\nimport \"./Input.css\";\n\ninterface IProps {\n  name: string;\n  value: string;\n  handleChange(event: React.FormEvent<HTMLInputElement>): void;\n}\n\nconst input: React.FC<IProps> = (props: IProps) => {\n  const { name, value, handleChange } = props;\n\n  return (\n    <input\n      className=\"card-task\"\n      placeholder=\"type some text here\"\n      type=\"text\"\n      name={name}\n      value={value}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default input;\n","import React from \"react\";\n\nimport \"./Button.css\";\n\nconst button = () => (\n  <button className=\"btn-add\" value=\"submit\">\n    <span>+</span>\n  </button>\n);\n\nexport default button;\n","import React from \"react\";\n\nconst footer = () => <footer />;\n\nexport default footer;\n","import React from \"react\";\n\nimport image from \"../../assets/img/Cloud_Warning.svg\";\nimport \"./Error.css\";\n\ninterface IProps {\n  error: string;\n}\n\nconst error: React.FC<IProps> = (props: IProps) => {\n  const { error } = props;\n\n  return (\n    <div id=\"error-loading\" className=\"absolute\">\n      <div className=\"relative\">\n        <img src={image} alt=\"cloud warning error\" />\n        <span>{error}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default error;\n","import React, { Component, FormEvent, MouseEvent } from \"react\";\nimport { nanoid } from 'nanoid';\n\nimport { TaskDefinition } from './types';\n\nimport \"./assets/css/reset.css\";\nimport \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks/Tasks\";\nimport Input from \"./components/Input/Input\";\nimport Button from \"./components/Button/Button\";\nimport Footer from \"./components/Footer\";\n\nimport Error from \"./components/Error/Error\";\n\nconst LOCALSTORAGE_KEY_TASKS = 'tasks';\n\ninterface IState {\n  appTitle: string;\n  input: string;\n  tasks: TaskDefinition[];\n  error: string;\n  pos: number;\n  onDragIndex: number;\n  onDropIndex: number;\n  loading: boolean;\n}\n\nclass App extends Component<{}, IState> {\n  state: IState = {\n    appTitle: \"To do list\",\n    input: \"\",\n    tasks: [],\n    error: \"\",\n    pos: 0,\n    onDragIndex: 0,\n    onDropIndex: 0,\n    loading: false\n  };\n  \n\n  buildTasks = ():void => {\n    const localStorageTasks = localStorage.getItem(LOCALSTORAGE_KEY_TASKS) || '';\n\n    this.setState({\n      tasks: JSON.parse(localStorageTasks) || [],\n      loading: false\n    });\n  };\n\n  componentDidMount() {\n    const localStorageTasks = localStorage.getItem(LOCALSTORAGE_KEY_TASKS) || '';\n\n    if(localStorageTasks) {\n      this.setState({\n        tasks: JSON.parse(localStorageTasks) || [],\n        loading: false\n      });\n    }\n  }\n\n  handleChange = (event: FormEvent<HTMLInputElement>) => {\n    const { value }: any = event.target;\n    this.setState({\n      input: value\n    });\n  };\n\n  handleSubmit = (event: any): void => {\n    const { tasks, input } = this.state;\n\n    event.preventDefault();\n    const lastIndex: number = tasks.length;\n    const task = {\n      key: nanoid(5),\n      title: input,\n      isDone: false,\n      date: new Date(),\n      pos: lastIndex + 1\n    } as TaskDefinition;\n\n    const newTasks = [...tasks, task];\n\n    localStorage.setItem(LOCALSTORAGE_KEY_TASKS, JSON.stringify(newTasks))\n\n    this.setState({\n      input: \"\",\n      tasks: newTasks\n    });\n  };\n\n  /**\n   * - toggles crossing out a task\n   * - sorts the list by done task\n   */\n  handleCrossOut = (key: string): void => {\n    const { tasks }: any = this.state;\n    const newTasks: TaskDefinition[] = [...tasks];\n\n    const taskToUpdate = newTasks.find(task => task.key === key);\n\n    if(!taskToUpdate) return;\n\n    taskToUpdate.isDone = !taskToUpdate.isDone;\n\n    newTasks.sort((a, b) => {\n      if (a.isDone === b.isDone) return 0;\n      if (a.isDone) return -1;\n      return 1;\n    })\n\n    localStorage.setItem(LOCALSTORAGE_KEY_TASKS, JSON.stringify(newTasks))\n\n\n    this.setState({ tasks: newTasks })\n  };\n\n  handleDelete = (key: string) => {\n    const { tasks }: any = this.state;\n    \n    const newTasks: TaskDefinition[] = [...tasks];\n\n    const filteredTasks = newTasks.filter(task => task.key !== key);\n\n    localStorage.setItem(LOCALSTORAGE_KEY_TASKS, JSON.stringify(filteredTasks))\n\n    this.setState({ tasks: filteredTasks })\n  };\n\n  onDrag = (event: MouseEvent, index: number): void => {\n    event.preventDefault();\n    this.setState({\n      onDragIndex: index\n    });\n  };\n\n  onDragOver = (event: MouseEvent) => {\n    event.preventDefault();\n  };\n\n  onDrop = async (event: MouseEvent, index: string) => {\n    // let newArr = [...this.state.tasks];\n\n    // const itemDragged = newArr.splice(this.state.onDragIndex, 1);\n\n    // await this.setState({\n    //   onDropIndex: index\n    // });\n\n    // newArr.splice(this.state.onDropIndex, 0, itemDragged[0]);\n    // this.setState({\n    //   tasks: newArr\n    // });\n  };\n\n  renderError() {\n    if (this.state.error !== \"\") {\n      return <Error error={this.state.error} />;\n    } else {\n      return null;\n    }\n  }\n\n  renderTasks() {\n    const { tasks, loading } = this.state;\n\n    if(tasks.length === 0) return <div style={{color: 'black'}}>Input your first task. It will only be saved in your browser</div>\n\n    return (\n      <Tasks\n        tasks={tasks}\n        handleCrossOut={this.handleCrossOut}\n        handleDelete={this.handleDelete}\n        onDrag={this.onDrag}\n        onDrop={this.onDrop}\n        loading={loading}\n      />\n    );\n  }\n\n  render() {\n    const { appTitle, input, tasks } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Header title={appTitle} />\n\n        {this.renderError()}\n\n        <div\n          className=\"card-container wrapper done\"\n          style={{alignItems: `${tasks.length === 0 ? 'center' : 'unset'}`, display: `${tasks.length === 0 ? 'flex' : 'unset'}`}}\n          onDragOver={this.onDragOver}\n        >\n          {this.renderTasks()}\n        </div>\n\n        <div className=\"wrapper\">\n          <form className=\"card\" onSubmit={this.handleSubmit}>\n            <Input\n              name=\"input\"\n              value={input}\n              handleChange={this.handleChange}\n            />\n            <div className=\"btn-add-container\">\n              <Button />\n            </div>\n          </form>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/* istanbul ignore next */\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n/* istanbul ignore next */\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/* istanbul ignore next */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\n/* istanbul ignore next */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\n/* istanbul ignore next */\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/* istanbul ignore next */\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n/* istanbul ignore next */\nserviceWorker.unregister();\n"],"sourceRoot":""}