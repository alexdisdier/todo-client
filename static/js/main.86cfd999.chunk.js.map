{"version":3,"sources":["components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["header","props","react_default","a","createElement","className","title","footer","App","state","appTitle","input","tasks","text","crossOut","tasksDone","delete","handleChange","event","name","target","value","update","_this","setState","handleSubmit","preventDefault","task","Object","toConsumableArray","push","handleCrossOut","updateTasks","i","length","handleDelete","_this2","this","Header","map","item","index","key","onClick","id","onSubmit","placeholder","type","onChange","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAUeA,eARA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWJ,EAAMK,UCCtBC,EAJA,SAAAN,GACb,OAAOC,EAAAC,EAAAC,cAAA,gBCqHMI,6MAhHbC,MAAQ,CACNC,SAAU,aACVC,MAAO,GACPC,MAAO,CACL,CACEC,KAAM,SACNC,UAAU,GAEZ,CACED,KAAM,SACNC,UAAU,GAEZ,CACED,KAAM,SACNC,UAAU,IAGdC,UAAW,GACXC,QAAQ,KAGVC,aAAe,SAAAC,GACb,IAAMC,EAAOD,EAAME,OAAOD,KACpBE,EAAQH,EAAME,OAAOC,MACrBC,EAAS,GACfA,EAAOH,GAAQE,EACfE,EAAKC,SAASF,MAGhBG,aAAe,SAAAP,GACbA,EAAMQ,iBACN,IAAMC,EAAO,CACXd,KAAMU,EAAKd,MAAME,MACjBG,UAAU,GAENF,EAAKgB,OAAAC,EAAA,EAAAD,CAAOL,EAAKd,MAAMG,OAC7BA,EAAMkB,KAAKH,GACXJ,EAAKC,SAAS,CACZb,MAAO,GACPC,MAAOA,OAIXmB,eAAiB,SAAAlB,GAEf,IADA,IAAMmB,EAAWJ,OAAAC,EAAA,EAAAD,CAAOL,EAAKd,MAAMG,OAC1BqB,EAAI,EAAGA,EAAID,EAAYE,OAAQD,IAClCD,EAAYC,GAAGpB,OAASA,IAC1BmB,EAAYC,GAAGnB,UAAYkB,EAAYC,GAAGnB,UAI9CS,EAAKC,SAAS,CACZZ,MAAOoB,OAIXG,aAAe,SAAAtB,GAEb,IADA,IAAMmB,EAAc,GACXC,EAAI,EAAGA,EAAIV,EAAKd,MAAMG,MAAMsB,OAAQD,IACvCV,EAAKd,MAAMG,MAAMqB,GAAGpB,OAASA,GAC/BmB,EAAYF,KAAKP,EAAKd,MAAMG,MAAMqB,IAGtCV,EAAKC,SAAS,CACZZ,MAAOoB,6EAIF,IAAAI,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkC,EAAD,CAAQhC,MAAO+B,KAAK5B,MAAMC,WAE1BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXgC,KAAK5B,MAAMG,MAAM2B,IAAI,SAACC,EAAMC,GAAP,OACpBvC,EAAAC,EAAAC,cAAA,MAAIsC,IAAKD,EAAOpC,UAAU,aACxBH,EAAAC,EAAAC,cAAA,QAAMuC,QAAS,kBAAMP,EAAKD,aAAaK,EAAK3B,QAA5C,KACAX,EAAAC,EAAAC,cAAA,QACEwC,GAAIH,EACJpC,UAAWmC,EAAK1B,SAAW,aAAe,GAC1C6B,QAAS,kBAAMP,EAAKL,eAAeS,EAAK3B,QAEvC2B,EAAK3B,WAOhBX,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAUwC,SAAUR,KAAKZ,cACvCvB,EAAAC,EAAAC,cAAA,SACEC,UAAU,YACVyC,YAAY,sBACZC,KAAK,OACL5B,KAAK,QACLE,MAAOgB,KAAK5B,MAAME,MAClBqC,SAAUX,KAAKpB,eAEjBf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUgB,MAAM,UAChCnB,EAAAC,EAAAC,cAAA,oBAKNF,EAAAC,EAAAC,cAAC6C,EAAD,cA3GUC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.86cfd999.chunk.js","sourcesContent":["import React from \"react\";\n\nconst header = props => {\n  return (\n    <header>\n      <h1 className=\"wrapper\">{props.title}</h1>\n    </header>\n  );\n};\n\nexport default header;\n","import React from \"react\";\n\nconst footer = props => {\n  return <footer />;\n};\n\nexport default footer;\n","import React, { Component } from \"react\";\nimport \"./assets/css/reset.css\";\nimport \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  state = {\n    appTitle: \"To do list\",\n    input: \"\",\n    tasks: [\n      {\n        text: \"test 1\",\n        crossOut: false\n      },\n      {\n        text: \"test 2\",\n        crossOut: false\n      },\n      {\n        text: \"test 3\",\n        crossOut: false\n      }\n    ],\n    tasksDone: [],\n    delete: false\n  };\n\n  handleChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    const update = {};\n    update[name] = value;\n    this.setState(update);\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const task = {\n      text: this.state.input,\n      crossOut: false\n    };\n    const tasks = [...this.state.tasks];\n    tasks.push(task);\n    this.setState({\n      input: \"\",\n      tasks: tasks\n    });\n  };\n\n  handleCrossOut = text => {\n    const updateTasks = [...this.state.tasks];\n    for (let i = 0; i < updateTasks.length; i++) {\n      if (updateTasks[i].text === text) {\n        updateTasks[i].crossOut = !updateTasks[i].crossOut;\n      }\n    }\n\n    this.setState({\n      tasks: updateTasks\n    });\n  };\n\n  handleDelete = text => {\n    const updateTasks = [];\n    for (let i = 0; i < this.state.tasks.length; i++) {\n      if (this.state.tasks[i].text !== text) {\n        updateTasks.push(this.state.tasks[i]);\n      }\n    }\n    this.setState({\n      tasks: updateTasks\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title={this.state.appTitle} />\n\n        <div className=\"card-container wrapper\">\n          <ul className=\"card\">\n            {this.state.tasks.map((item, index) => (\n              <li key={index} className=\"card-item\">\n                <span onClick={() => this.handleDelete(item.text)}>X</span>\n                <span\n                  id={index}\n                  className={item.crossOut ? \"cross-task\" : \"\"}\n                  onClick={() => this.handleCrossOut(item.text)}\n                >\n                  {item.text}\n                </span>\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <form className=\"wrapper\" onSubmit={this.handleSubmit}>\n          <input\n            className=\"card-item\"\n            placeholder=\"type some text here\"\n            type=\"text\"\n            name=\"input\"\n            value={this.state.input}\n            onChange={this.handleChange}\n          />\n          <div className=\"btn-add-container\">\n            <button className=\"btn-add\" value=\"submit\">\n              <span>+</span>\n            </button>\n          </div>\n        </form>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// handleCrossOut = id => {\n//   const tasks = [...this.state.tasks];\n//   const element = document.getElementById(id);\n//   const innerEle = element.innerText;\n//   let endArr = \"\";\n//   element.classList.toggle(\"cross-task\");\n//   if (element.classList.contains(\"cross-task\")) {\n//     if (tasks.includes(innerEle)) {\n//       endArr = tasks.splice(tasks.indexOf(innerEle), 1).join(\"\");\n//       this.setState({\n//         tasks: [...tasks, endArr]\n//       });\n//     }\n//   }\n// };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}