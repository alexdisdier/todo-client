{"version":3,"sources":["components/Header.js","components/Footer.js","components/Item/Item.js","components/Input/Input.js","components/Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["header","props","react_default","a","createElement","className","title","footer","item","Fragment","onClick","handleDelete","index","crossOut","handleCrossOut","input","placeholder","type","name","value","onChange","handleChange","button","App","state","appTitle","tasks","buildTasks","axios","get","headers","Content-Type","then","res","data","_this","setState","deleteTasks","event","target","update","handleSubmit","preventDefault","task","post","updateTasks","Object","toConsumableArray","id","_id","concat","this","_this2","Header","map","Item_Item","key","onSubmit","Input_Input","Button_Button","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+WAUeA,eARA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWJ,EAAMK,UCCtBC,EAJA,SAAAN,GACb,OAAOC,EAAAC,EAAAC,cAAA,gBCiBMI,SAhBF,SAAAP,GACX,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACEP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,QAAMM,QAAS,kBAAMT,EAAMU,aAAaV,EAAMW,SAA9C,KACAV,EAAAC,EAAAC,cAAA,QACEC,UAAWJ,EAAMY,SAAW,aAAe,GAC3CH,QAAS,kBAAMT,EAAMa,eAAeb,EAAMW,SAEzCX,EAAMK,WCCFS,SAXD,SAAAd,GAAK,OACjBC,EAAAC,EAAAC,cAAA,SACEC,UAAU,YACVW,YAAY,sBACZC,KAAK,OACLC,KAAMjB,EAAMiB,KACZC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,iBCALC,SANA,SAAArB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUc,MAAM,UAChCjB,EAAAC,EAAAC,cAAA,oBCmJWmB,6MA7IbC,MAAQ,CACNC,SAAU,aACVV,MAAO,GACPW,MAAO,MAiBTC,WAAa,WACXC,IACGC,IADH,8CACsD,CAClDC,QAAS,CACPC,eAAgB,sBAGnBC,KAAK,SAAAC,GACJ,IAAMP,EAAQO,EAAIC,KAClBC,EAAKC,SAAS,CAAEV,eAItBW,YAAc,eAMdhB,aAAe,SAAAiB,GACb,IAAMpB,EAAOoB,EAAMC,OAAOrB,KACpBC,EAAQmB,EAAMC,OAAOpB,MACrBqB,EAAS,GACfA,EAAOtB,GAAQC,EACfgB,EAAKC,SAASI,MAGhBC,aAAe,SAAAH,GACbA,EAAMI,iBACN,IAAMC,EAAO,CACXrC,MAAO6B,EAAKX,MAAMT,OAKpBoB,EAAKC,SAAS,CACZrB,MAAO,KAITa,IACGgB,KADH,gDACyDD,EAAM,CAC3Db,QAAS,CACPC,eAAgB,sBAGnBC,KAAK,SAAAC,GACJE,EAAKR,kBAIXb,eAAiB,SAAAF,GACf,IAAMiC,EAAWC,OAAAC,EAAA,EAAAD,CAAOX,EAAKX,MAAME,OACnCmB,EAAYjC,GAAOC,UAAYgC,EAAYjC,GAAOC,SAElDsB,EAAKC,SAAS,CACZV,MAAOmB,OAIXlC,aAAe,SAAAC,GAUb,IAAMoC,EAAKb,EAAKX,MAAME,MAAMd,GAAOqC,IACnCrB,IACGgB,KADH,oDAAAM,OAC4DF,GAAM,CAC9DlB,QAAS,CACPC,eAAgB,sBAGnBC,KAAK,SAAAC,GACJE,EAAKR,mGA9DTwB,KAAKxB,8CAkEE,IAAAyB,EAAAD,KACP,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiD,EAAD,CAAQ/C,MAAO6C,KAAK3B,MAAMC,WAE1BvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACX8C,KAAK3B,MAAME,MAAM4B,IAAI,SAAC9C,EAAMI,GAAP,OACpBV,EAAAC,EAAAC,cAACmD,EAAD,CACEC,IAAK5C,EACLD,aAAcyC,EAAKzC,aACnBG,eAAgBsC,EAAKtC,eACrBR,MAAOE,EAAKF,MACZM,MAAOA,EACPC,SAAUL,EAAKK,eAMvBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOoD,SAAUN,KAAKV,cACpCvC,EAAAC,EAAAC,cAACsD,EAAD,CACExC,KAAK,QACLC,MAAOgC,KAAK3B,MAAMT,MAClBM,aAAc8B,KAAK9B,eAErBnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACuD,EAAD,SAKNzD,EAAAC,EAAAC,cAACwD,EAAD,cAxIUC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.132811dd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst header = props => {\n  return (\n    <header>\n      <h1 className=\"wrapper\">{props.title}</h1>\n    </header>\n  );\n};\n\nexport default header;\n","import React from \"react\";\n\nconst footer = props => {\n  return <footer />;\n};\n\nexport default footer;\n","import React from \"react\";\n\nimport \"./Item.css\";\n\nconst item = props => {\n  return (\n    <>\n      <li className=\"card-item\">\n        <span onClick={() => props.handleDelete(props.index)}>X</span>\n        <span\n          className={props.crossOut ? \"cross-task\" : \"\"}\n          onClick={() => props.handleCrossOut(props.index)}\n        >\n          {props.title}\n        </span>\n      </li>\n    </>\n  );\n};\n\nexport default item;\n","import React from \"react\";\nimport \"./Input.css\";\n\nconst input = props => (\n  <input\n    className=\"card-item\"\n    placeholder=\"type some text here\"\n    type=\"text\"\n    name={props.name}\n    value={props.value}\n    onChange={props.handleChange}\n  />\n);\n\nexport default input;\n","import React from \"react\";\n\nimport \"./Button.css\";\n\nconst button = props => (\n  <button className=\"btn-add\" value=\"submit\">\n    <span>+</span>\n  </button>\n);\n\nexport default button;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./assets/css/reset.css\";\nimport \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Item from \"./components/Item/Item\";\nimport Input from \"./components/Input/Input\";\nimport Button from \"./components/Button/Button\";\n\nclass App extends Component {\n  state = {\n    appTitle: \"To do list\",\n    input: \"\",\n    tasks: [\n      // {\n      //   title: \"test 1\",\n      //   crossOut: false\n      // },\n      // {\n      //   title: \"test 2\",\n      //   crossOut: false\n      // },\n      // {\n      //   title: \"test 3\",\n      //   crossOut: false\n      // }\n    ]\n  };\n\n  // Axios\n  buildTasks = () => {\n    axios\n      .get(`https://todo-server-alex.herokuapp.com/read`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(res => {\n        const tasks = res.data;\n        this.setState({ tasks });\n      });\n  };\n\n  deleteTasks = () => {};\n\n  componentDidMount() {\n    this.buildTasks();\n  }\n\n  handleChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    const update = {};\n    update[name] = value;\n    this.setState(update);\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const task = {\n      title: this.state.input\n      // crossOut: false\n    };\n    // const tasks = [...this.state.tasks, task];\n\n    this.setState({\n      input: \"\"\n      // tasks: tasks\n    });\n\n    axios\n      .post(`https://todo-server-alex.herokuapp.com/create`, task, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(res => {\n        this.buildTasks();\n      });\n  };\n\n  handleCrossOut = index => {\n    const updateTasks = [...this.state.tasks];\n    updateTasks[index].crossOut = !updateTasks[index].crossOut;\n\n    this.setState({\n      tasks: updateTasks\n    });\n  };\n\n  handleDelete = index => {\n    // const updateTasks = [];\n    // for (let i = 0; i < this.state.tasks.length; i++) {\n    //   if (i !== index) {\n    //     updateTasks.push(this.state.tasks[i]);\n    //   }\n    // }\n    // this.setState({\n    //   tasks: updateTasks\n    // });\n    const id = this.state.tasks[index]._id;\n    axios\n      .post(`https://todo-server-alex.herokuapp.com/delete?id=${id}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(res => {\n        this.buildTasks();\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title={this.state.appTitle} />\n\n        <div className=\"card-container wrapper\">\n          <ul className=\"card\">\n            {this.state.tasks.map((item, index) => (\n              <Item\n                key={index}\n                handleDelete={this.handleDelete}\n                handleCrossOut={this.handleCrossOut}\n                title={item.title}\n                index={index}\n                crossOut={item.crossOut}\n              />\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"wrapper\">\n          <form className=\"card\" onSubmit={this.handleSubmit}>\n            <Input\n              name=\"input\"\n              value={this.state.input}\n              handleChange={this.handleChange}\n            />\n            <div className=\"btn-add-container\">\n              <Button />\n            </div>\n          </form>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}